{"version":3,"sources":["components/PokedexItem.js","components/PokedexPagination.js","components/Pokedex.js","components/PokemonDetails.js","App.js","reportWebVitals.js","index.js"],"names":["PokedexItem","_ref","pokemon","imageUrl","setImageUrl","useState","useEffect","fetch","url","then","res","json","data","sprites","front_default","catch","error","console","React","createElement","className","src","alt","name","PokedexPagination","goToNextPage","goToPrevPage","prevPageUrl","nextPageUrl","onClick","Pokedex","pokemonList","setPokemonList","currentPageUrl","setCurrentPageUrl","setNextPageUrl","setPrevPageUrl","isLoading","setIsLoading","next","previous","results","map","result","Link","to","concat","key","PokemonDetails","id","useParams","setPokemon","async","axios","get","getPokemon","types","type","join","height","weight","abilities","ability","stats","stat","base_stat","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.439565cd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst PokedexItem = ({ pokemon }) => {\n  const [imageUrl, setImageUrl] = useState('');\n\n  useEffect(() => {\n    fetch(pokemon.url)\n      .then(res => res.json())\n      .then(data => setImageUrl(data.sprites.front_default))\n      .catch(error => console.error(error));\n  }, [pokemon.url]);\n\n  return (\n    <div className=\"pokedex-item\">\n      {imageUrl ? (\n        <img src={imageUrl} alt={pokemon.name} />\n      ) : (\n        <div>No image available</div>\n      )}\n      <div className=\"pokedex-item-name\">{pokemon.name}</div>\n    </div>\n  );\n};\n\nexport default PokedexItem;\n","import React from 'react';\n\nconst PokedexPagination = ({ goToNextPage, goToPrevPage, prevPageUrl, nextPageUrl }) => {\n  return (\n    <div>\n      {prevPageUrl && <button onClick={goToPrevPage}>Previous</button>}\n      {nextPageUrl && <button onClick={goToNextPage}>Next</button>}\n    </div>\n  );\n};\n\nexport default PokedexPagination;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PokedexItem from './PokedexItem';\nimport PokedexPagination from './PokedexPagination.js';\nimport './Pokedex.css';\n\n\nfunction Pokedex() {\n  const [pokemonList, setPokemonList] = useState([]);\n  const [currentPageUrl, setCurrentPageUrl] = useState('https://pokeapi.co/api/v2/pokemon');\n  const [nextPageUrl, setNextPageUrl] = useState();\n  const [prevPageUrl, setPrevPageUrl] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(currentPageUrl)\n      .then(res => res.json())\n      .then(data => {\n        setIsLoading(false);\n        setNextPageUrl(data.next);\n        setPrevPageUrl(data.previous);\n        setPokemonList(data.results.map(result => ({\n          name: result.name,\n          url: result.url,\n        })));\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n      });\n  }, [currentPageUrl]);\n\n  const goToNextPage = () => {\n    setCurrentPageUrl(nextPageUrl);\n  };\n\n  const goToPrevPage = () => {\n    setCurrentPageUrl(prevPageUrl);\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"pokedex\">\n      <h1>Pokedex</h1>\n      <Link to=\"/about\">About</Link>\n      <div className=\"pokedex-grid\">\n        {pokemonList.map(pokemon => (\n          <Link to={`/pokemon/${pokemon.name}`} key={pokemon.name}>\n            <PokedexItem pokemon={pokemon} />\n          </Link>\n          \n        ))}\n      </div>\n      <PokedexPagination\n        goToNextPage={goToNextPage}\n        goToPrevPage={goToPrevPage}\n        prevPageUrl={prevPageUrl}\n        nextPageUrl={nextPageUrl}\n      />\n    </div>\n  );\n  \n  \n  \n}\n\nexport default Pokedex;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nconst PokemonDetails = () => {\n  const { id } = useParams();\n  const [pokemon, setPokemon] = useState(null);\n\n  useEffect(() => {\n    const getPokemon = async () => {\n      const { data } = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`);\n      setPokemon(data);\n    };\n    getPokemon();\n  }, [id]);\n\n  if (!pokemon) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h2>{pokemon.name}</h2>\n      <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n      <div>\n        <strong>Type:</strong> {pokemon.types.map(type => type.type.name).join(', ')}\n      </div>\n      <div>\n        <strong>Height:</strong> {pokemon.height / 10} m\n      </div>\n      <div>\n        <strong>Weight:</strong> {pokemon.weight / 10} kg\n      </div>\n      <div>\n        <strong>Abilities:</strong> {pokemon.abilities.map(ability => ability.ability.name).join(', ')}\n      </div>\n      <div>\n        <strong>Stats:</strong>\n        <ul>\n          {pokemon.stats.map(stat => (\n            <li key={stat.stat.name}>\n              {stat.stat.name}: {stat.base_stat}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonDetails;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport Pokedex from './components/Pokedex';\nimport PokemonDetails from './components/PokemonDetails';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Pokedex />} />\n        <Route path=\"/pokemon/:id\" element={<PokemonDetails />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Get the root element\nconst rootElement = document.getElementById('root');\n\n// Create a root\nconst root = ReactDOM.createRoot(rootElement);\n\n// Render the app inside the root\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}